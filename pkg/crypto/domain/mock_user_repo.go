// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/obarbier/awesome-crypto/crypto_service_api/domain (interfaces: KeyRepository)

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKeyRepository is a mock of KeyRepository interface.
type MockKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockKeyRepositoryMockRecorder
}

// MockKeyRepositoryMockRecorder is the mock recorder for MockKeyRepository.
type MockKeyRepositoryMockRecorder struct {
	mock *MockKeyRepository
}

// NewMockKeyRepository creates a new mock instance.
func NewMockKeyRepository(ctrl *gomock.Controller) *MockKeyRepository {
	mock := &MockKeyRepository{ctrl: ctrl}
	mock.recorder = &MockKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyRepository) EXPECT() *MockKeyRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKeyRepository) Get(arg0 context.Context, arg1 string) (*KeyEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*KeyEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeyRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyRepository)(nil).Get), arg0, arg1)
}

// Save mocks base method.
func (m *MockKeyRepository) Save(arg0 context.Context, arg1 KeyEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockKeyRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockKeyRepository)(nil).Save), arg0, arg1)
}
